---
#@ load("funcs.lib.yml", "slack_hook", "pr_hook")
#@ load("@ytt:data", "data")
#@ load("@ytt:template", "template")

#@ env = data.values.env

#!  SHARED

test-redirects: &test-redirects
  - task: install-dependencies
    image: node
    file: pipeline-tasks/tasks/run-command.yml
    params:
      COMMAND: npm install

  - task: build
    image: node
    file: pipeline-tasks/tasks/run-command.yml
    params:
      COMMAND: npm run build

  - task: test-redirects
    image: dind
    privileged: true
    file: src/ci/partials/test-redirects.yml

#!  JOBS

jobs:
  - name: set-pipeline
    plan:
      - get: src
        params:
          #@ if/end env != 'test':
          params: { depth: 1 }
          #@ if/end env == 'test':
          integration_tool: checkout
        trigger: true
      - get: pipeline-tasks
      - get: general-task
      - task: boot
        image: general-task
        file: pipeline-tasks/tasks/boot.yml
        params:
          ENV_OVERRIDE: ((deploy-env))
      - set_pipeline: self
        file: compiled/set-pipeline.yml
        instance_vars:
          deploy-env: ((deploy-env))

  #@ if/end env == 'test':
  - name: test-redirects
    plan:
      - get: src
        passed: [set-pipeline]
        trigger: true
        version: every
      -  #@ pr_hook("pending", "run-tests")
      - get: pipeline-tasks
      - get: node
      - get: dind
      - do: *test-redirects

    on_failure:
      in_parallel:
        -  #@ pr_hook("failure", "run-tests")
        -  #@ slack_hook("failure", "tests")

    on_success:
      in_parallel:
        -  #@ pr_hook("success", "run-tests")
        -  #@ slack_hook("success", "tests")

  #@ if env == 'deploy':
  - name: test-and-deploy-redirects
    plan:
      - get: src
        passed: [set-pipeline]
        trigger: true
      - get: pipeline-tasks
      - get: general-task
      - get: node
      - get: dind
      - do: *test-redirects
      - task: deploy
        image: general-task
        file: src/ci/partials/deploy.yml
        params:
          _: #@ template.replace(data.values.env_cf_redirects)
          CF_MANIFEST: src/out/manifest-prod.yml
          CF_PATH: src/out
        on_failure:
          try:
            task: cancel-api-deployment
            image: general-task
            file: pipeline-tasks/tasks/cancel-deployment.yml
            params:
              _: #@ template.replace(data.values.env_cf_redirects)

    on_failure: #@ slack_hook("failure", "deployment")
    on_success: #@ slack_hook("success", "deployment")

  - name: nightly-restage
    plan:
      - get: src
        passed: [set-pipeline]
      - get: nightly
        trigger: true
      - get: general-task
      - get: pipeline-tasks
      - task: restage
        image: general-task
        file: pipeline-tasks/tasks/restage.yml
        params:
          _: #@ template.replace(data.values.env_cf_redirects)
  #@ end

#!  RESOURCES

resources:
  #@ if/end env == 'test':
  - name: src
    type: pull-request
    check_every: 1m
    source:
      repository: cloud-gov/pages-redirects
      access_token: ((gh-access-token))
      base_branch: main
      disable_forks: true
      ignore_drafts: false

  #@ if env == 'deploy':
  - name: src
    type: git
    icon: github
    source:
      uri: https://github.com/cloud-gov/pages-redirects
      branch: main
      commit_verification_keys: ((cloud-gov-pages-gpg-keys))

  - name: nightly
    type: time
    source:
      start: 12:00 AM
      stop: 1:00 AM
      location: America/New_York
  #@ end

  - name: slack
  - name: node
  - name: general-task
  - name: dind
  - name: pipeline-tasks

#!  RESOURCE TYPES

resource_types:
  - name: git
  - name: slack-notification
  - name: pull-request
  - name: time
  - name: registry-image
